version: 2.1

description: |
  This orb enable the use of

#executors:
#  alpine:
#    docker:
#      - environment:
#          TERM: dumb
#        image: cibuilds/base:latest
#    resource_class: small

orbs:
  # https://circleci.com/orbs/registry/orb/circleci/aws-cli
  aws-cli: circleci/aws-cli@0.1.4
  # https://circleci.com/orbs/registry/orb/circleci/aws-ecr
  aws-ecr: circleci/aws-ecr@6.2.0

anchors:
  &run_slack_command
  name: Envia un mensaje por slack
  command: |
    if [ -z "<< parameters.webhook >>" ]; then
      echo "falta el parametro 'webhook'"
      exit 1
    fi
    if [ -z "<< parameters.channel >>" ]; then
      echo "falta el parametro 'channel'"
      exit 1
    fi
    if [ -z "<< parameters.text >>" ]; then
      echo "falta el parametro 'text'"
      exit 1
    fi
    payload="payload={
            \"channel\": \"<< parameters.channel >>\",
            \"username\": \"CircleCI\",
            \"icon_emoji\": \":circleci:\",
            \"text\": \"<< parameters.text >>\"
    }"
    # somethimes, the curl fails (curl: (28) Resolving timed out after 5514 milliseconds, #Exited with code 28)
    # but this step is not mandatory to make the deployment work... so with "|| true" it will success anyways
    curl -m 5 --data-urlencode "${payload}" << parameters.webhook >> || true

commands:
  save_image_tag_on_workspace:
    steps:
      - run:
          name: crea la variable de ambiente IMAGE_TAG y la guarda en /tmp/shared-env/image-tag
          command: |
            # Ej. 20190820-124026_SebastianOliva_master_3a17155_CI
            RAW_IMAGE_TAG=$(TZ=America/Santiago date +%Y%m%d-%H%M%S)_${CIRCLE_USERNAME}_${CIRCLE_BRANCH}_${CIRCLE_SHA1:0:7}_CI
            # quitar todos los caracteres que no sean letras y numeros
            mkdir /tmp/shared-env
            echo "export IMAGE_TAG=$(echo $RAW_IMAGE_TAG | sed 's/[^a-zA-Z0-9_-]//g')" >> /tmp/shared-env/image-tag
            cat /tmp/shared-env/image-tag >> $BASH_ENV
      - persist_to_workspace:
          root: /tmp/shared-env
          paths: image-tag

  load_image_tag_from_workspace:
    steps:
      - attach_workspace:
          at: /tmp/shared-env
      - run:
          name: carga variable de ambiente IMAGE_TAG desde /tmp/shared-env/image-tag
          command: cat /tmp/shared-env/image-tag >> $BASH_ENV

  slack_msg:
    description: "Envia un text a un canal(es)/usuario(s) de slack"
    parameters:
      webhook: {type: string, default: $SLACK_WEBHOOK}
      channel: {type: string, default: $SLACK_CHANNEL}
      text: {type: string}
    steps:
      - run:
          <<: *run_slack_command
          #command: |
          #  if [ -z "<< parameters.webhook ...

  slack_msg_on_failure:
    description: "Envia un text a un canal(es)/usuario(s) de slack cuando el proceso falla"
    parameters:
      webhook: {type: string, default: $SLACK_WEBHOOK}
      channel: {type: string, default: $SLACK_CHANNEL}
      text: {type: string}
    steps:
      - run:
          <<: *run_slack_command
          #command: |
          #  if [ -z "<< parameters.webhook ...
          when: on_fail

  update_taskdef_and_service:
    parameters:
      family: {type: string}
      image: {type: string}
    steps:
      - run:
          name: pip install boto3
          command: |
            export PIP=$(which pip pip3 | head -1)
            sudo $PIP install boto3
      - run:
          name: create the script "update-task-and-service.py"
          command: |
            SCRIPT=$(mktemp update-task-and-service-XXXX.py)
            chmod +x $SCRIPT
            # "<-", all leading <tab> characters shall be stripped from input
            cat > $SCRIPT \<<-EOF
            import sys, boto3
            [_, family, image, *other] = sys.argv
            ecs_client = boto3.session.Session().client(service_name='ecs')
            ssm_client = boto3.session.Session().client(service_name='ssm')
            # take the last task definition of the family
            try:
                taskdef_desc = ecs_client.describe_task_definition(taskDefinition=family).get('taskDefinition')
                print(f"The last task definition of '{family}' is '{taskdef_desc.get('taskDefinitionArn').split('/')[1]}'")
                for unwanted_key in ["taskDefinitionArn", "revision", "status", "requiresAttributes", "compatibilities"]:
                    taskdef_desc.pop(unwanted_key, None)
            except:
                raise Exception(f"'{family}' is not a valid taskdefinition")
            # get the SSM params and convert it to secrets
            try:
                [env, project, cont] = family.split('-')
                ssm_prefix = f"/{env.upper()}/{project.upper()}/"
                print(f"Seeking for SSM params with the prefix '{ssm_prefix}'")
                resp = ssm_client.get_parameters_by_path(Path=ssm_prefix, MaxResults=10)
                ssm_params = resp.get('Parameters')
                next_token = resp.get('NextToken')
                while next_token:
                    next_resp = ssm_client.get_parameters_by_path(Path=ssm_prefix, MaxResults=10, NextToken=next_token)
                    ssm_params += next_resp.get('Parameters')
                    next_token = next_resp.get('NextToken')
                ssm_names = list(map(lambda p: p.get('Name'), ssm_params))
                print(f"The following params where found: ", list(map(lambda n: n.split('/')[-1], ssm_names)))
                secrets = list(map(lambda name: {'name': name.split('/')[-1], 'valueFrom': name}, ssm_names))
            except:
                raise Exception(f"Error trying to get the secrets from the SSM params")
            # update the ssm secrets + the image used on the containers + the tags of the task definition
            for cont in taskdef_desc.get('containerDefinitions'):
                cont['image'] = image
                cont['secrets'] = secrets
            taskdef_desc["tags"] = [{"key": "Name", "value": "por CircleCI"}]
            # crate a new task def + update the service
            new_taskdef_desc = ecs_client.register_task_definition(**taskdef_desc).get('taskDefinition')
            new_revision = new_taskdef_desc.get('taskDefinitionArn').split('/')[1]
            print(f"A new task definition '{new_revision}' was successfully created")
            ecs_client.update_service(
                cluster=f"{env}-cluster",
                service=family,
                forceNewDeployment=True,
                taskDefinition=new_revision
            )
            print(f"The service {family} was updated with the new task definition")
            EOF
            python3 $SCRIPT << parameters.family >> << parameters.image >>


  rollbar_deploy:
    description: "notificar a Rollbar el inicio de un deploy"
    parameters:
      rollbar_access_token: {type: string, default: $ROLLBACK_ACCESS_TOKEN}
      revision: {type: string, default: $CIRCLE_SHA1}
      environment: {type: string}
    steps:
      - run:
          name: Enviar POST a Rollbar con el inicio del deploy
          command: |
            if [ -z "<< parameters.rollbar_access_token >>" ]; then
              echo "falta el parametro 'rollbar_access_token'"
              exit 1
            fi
            if [ -z "<< parameters.revision >>" ]; then
              echo "falta el parametro 'revision'"
              exit 1
            fi
            if [ -z "<< parameters.environment >>" ]; then
              echo "falta el parametro 'environment'"
              exit 1
            fi

            curl https://api.rollbar.com/api/1/deploy/ \
            --form access_token=<< parameters.rollbar_access_token >> \
            --form revision=<< parameters.revision >> \
            --form environment=<< parameters.environment >> \
            --form local_username='circleci-pipeline'

jobs:
  build_and_push:
    parameters:
      region: {type: env_var_name, default: AWS_REGION}
    # slack: "nuevo build"
    # aws-ecr/build-and-push-image
    # slack: "imagen disponible"
    executor: aws-ecr/default  # usar el executor de aws-ecr para poder usar su command (aws-ecr/build-and-push-image)
    steps:
      - save_image_tag_on_workspace
      - slack_msg:
          text: "*${APP_NAME}* - Nuevo build iniciado por *${CIRCLE_USERNAME}* (en ${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}, ${CIRCLE_SHA1:0:7})"
      - aws-cli/install
      - aws-cli/configure:
          aws-region: <<parameters.region>>
      - aws-ecr/ecr-login:
          region: <<parameters.region>>
      - checkout
      # descargar una imagen ya existen para hacer el build mas rapido al saltarse layers
      - run: docker pull ${AWS_ECR_ACCOUNT_URL}/${AWS_REPO}:latest || true
      - aws-ecr/build-image:
          dockerfile: "docker/prod.Dockerfile"
          repo: "${AWS_REPO}"
          tag: ${IMAGE_TAG}
          extra-build-args: "-t $AWS_ECR_ACCOUNT_URL/${AWS_REPO}:latest --cache-from $AWS_ECR_ACCOUNT_URL/${AWS_REPO}:latest --build-arg GIT_BRANCH=${CIRCLE_BRANCH} --build-arg GIT_COMMIT=${CIRCLE_SHA1}"
      # enviar la imagen con dos tags
      - aws-ecr/push-image:
          repo: "${AWS_REPO}"
          tag: ${IMAGE_TAG}
      - aws-ecr/push-image:
          repo: "${AWS_REPO}"
          tag: "latest"
      - slack_msg:
          text: "*${APP_NAME}* - La imagen *${IMAGE_TAG}* ya esta disponible en ERC"
      - slack_msg_on_failure:
          text: "*${APP_NAME}* - Error al construir la imagen ${CIRCLE_BUILD_URL} ${IMAGE_TAG}"

  update_service:
    # slack: "actualizando servicio"
    # crea un task def y actualiza el servicio
    # slack: "servicio actualizado""
    docker:
      - image: circleci/python:3.7.1 # por defecto la misma que ocupa el obr aws-ecs
    parameters:
      service_name: {type: string}
      cluster_name: {type: string}
      container_name: {type: string}
    steps:
      - aws-cli/install
      - aws-cli/configure
      - load_image_tag_from_workspace
      - update_taskdef_and_service:
          family: << parameters.service_name >>
          image: ${AWS_ECR_ACCOUNT_URL}/${AWS_REPO}:$IMAGE_TAG
      - slack_msg:
          text: "*${APP_NAME}* - Servicio *<< parameters.service_name >>* actualizado, yuhu!!"
      - slack_msg_on_failure:
          text: "*${APP_NAME}* - Error al actualizar el servicio *<< parameters.service_name >>*, ${CIRCLE_BUILD_URL}"

  slack_manual_approval:
    executor: aws-ecr/default
    steps:
      - slack_msg:
          text: "*${APP_NAME}* Deploy de *stag* listo, para pasar a *prod* se debe aceptar manualmente ${CIRCLE_BUILD_URL}"

  rollbar_notify_deploy:
    executor: aws-ecr/default
    parameters:
      environment: {type: string}
    steps:
    - rollbar_deploy:
        environment: << parameters.environment >>
